@startuml Class

namespace Players {

    class PlayerLifetimeScope <<LifetimeScope>> {
        
    }

    interface IInputProvider {
        + IReadOnlyReactiveProperty<bool> HoldAction
        + IReadOnlyReactiveProperty<Vector3> MoveDirection
    }

    namespace Impl {
        class DebugInputProvider {
            - ReactiveProperty<bool> _holdAction
            - ReactiveProperty<Vector3> _moveDirection
        }

        class ReleaseInputProvider {
            - ReactiveProperty<bool> _holdAction
            - ReactiveProperty<Vector3> _moveDirection
        }
    }

    Players.IInputProvider <|-- Players.Impl.DebugInputProvider
    Players.IInputProvider <|-- Players.Impl.ReleaseInputProvider

    class PlayerPresenter {}

    class PlayerMover <<MonoBehavior>> {
        - ReadOnlyReactiveProperty<float> _velocity

        + void UpdatePlayerMoveVelocity()
        + void UpdatePlayerPosition()
    }

    class PlayerAnimator <<MonoBehavior>> {

    }

    class PlayerSound <<MonoBehavior>> {

    }

    class PlayerToysHolder {
        + IReadOnlyReactiveProperty<Toys.Type> CurrentHoldingToy

    }

    PlayerPresenter *-- IInputProvider : Observe Input Event
    PlayerPresenter *-- PlayerMover : Observe and Action Move
    PlayerMover *-- PlayerToysHolder : Check currentHolding toys to adjust move velocity
    PlayerPresenter *-- PlayerAnimator : Observe and Action Animation
    PlayerPresenter *-- PlayerToysHolder : Transfer Hold Action
    PlayerPresenter *.. Strength.StrengthParameter : Check Strength is 0 to unhold CurrentHolding Toy
    PlayerToysHolder *.. Holder.IHoldable : Hold Action Activate
    PlayerToysHolder *.. Weary.IWearyAcceptable : Update Strength

}

namespace Weary {

    interface IWearyAcceptable {
        + UpdateStrength(float deltaStrength)
    }

    class WearyAcceptable() {
        
    }


}

namespace Strength {

    class StrengthViewer <<MonoBehavior>> {}
    
    class StrengthPresenter {}

    class StrengthParameter {
        + IReadOnlyReactiveProperty<float> Strength
        ==        
    }

    StrengthPresenter *-- StrengthViewer : Observe and Action
    StrengthPresenter *-- StrengthParameter : Observe and Action
}

Weary.IWearyAcceptable <|.. Strength.StrengthParameter

namespace ParentAnger {

    class AngerGage {}

    class AngerPresenter {}

    class AngerParameter {
        + IReadOnlyReactiveProperty<float> AngerValue
        ==
        + AddAngaerValue(float addValue)
    }

    interface VContainer.Unity.IStartable {}
    interface VContainer.Unity.ITickable {}

    AngerPresenter *-- AngerGage : Update Gage Viewer
    AngerPresenter *-- AngerParameter : Observe GateValue
    AngerPresenter <|.. VContainer.Unity.IStartable
    AngerPresenter <|.. VContainer.Unity.ITickable
}

namespace Toys {

    class ToyObject <<MonoBehavior>> {
        - ToyParam _param
        ==

    }
    
    class ToyParam <<struct>>  {
        + Type Type
        + float weght
        + float point
    }
    
    enum Type {
        None
        KittenBike
        Shinkansen
        DocterYellow
        CommandStation
    }
    
    ToyParam -- Type
    ToyObject "0.." -- "1" ToyParam
}

namespace Holder {

    interface IHoldable {
        + IReadOnlyReactiveProperty<bool> IsHold
        + bool TryHold()
        + void UnHold()
    }
    
}

Toys.ToyObject ..|> Holder.IHoldable


namespace Toybox {

    class ToyboxObject <<MonoBehavior>> {}

    class ToyboxParameter {
        - List<Toys.Type> _containToysList
        + IReadOnlyReactiveProperty<float> CurrentPoint

        ==
        + bool AddToy(Toys.Type)        
        + bool RemoveToy(int index)
    }

}

namespace Field {


}

namespace Maneger {

    class GameStatusManager {
        + void ChangeGameStatus()
    }

    class GameInitializer {
        + IReadOnlyReactiveProperty<Unit> InitializeCompleted
        ==
        + async void Initialize()
    }

    class ResultGameManager {
        
    }

    class TimeManager {
        + IReadOnlyReactiveProperty<float> BeforeStartTime
    }

    class GameStatus <<struct>> {
        + IReadOnlyReactiveProperty<Manager.Type> Status
        - ReactiveProperty<Manager.Type> _status
    }

    enum Type {
        INIT
        PLAYING
        RESULT
    }

    ResultGameManager *.. Toybox.ToyboxParameter : Observe CurrentPoint
    ResultGameManager *.. ParentAnger.AngerParameter : Observe AngerValue

}

namespace Sound {

}


@enduml
